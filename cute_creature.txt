COMP 2150 - Summer 2023
Homework 2: Object-Oriented Programming

1. Suppose you’re designing a video game where the objective is to travel around the world collecting cute cartoonish creatures that become stronger over time by fighting other cute cartoonish
creatures. (This is totally the best idea ever! Why hasn’t anyone thought of this before?!)
Within a file named cute creature.py, write a class CuteCreature that includes the following
components.

(a) (3 points) Each CuteCreature object has the following instance attributes:1
• Species - a string indicating the type of creature (such as ‘Bowlbasore,’ ‘Squaretell,’
or ‘Peekashoe’)
• Level - a positive integer indicating how powerful the creature is
• Current hit points - a non-negative integer indicating how much damage the creature
can take before being incapacitated
• Maximum hit points - a positive integer indicating the highest possible value of current
hit points
• Attack rating - an integer indicating how effective this creature is at attacking another
creature (higher values mean stronger attacks)
• Defense rating - an integer indicating how effective this creature is at resisting an
attack from another creature (higher values mean stronger defenses)
• Experience points - a non-negative integer indicating the creature’s cumulative experience. Creatures use experience points to determine when to “level up” and become
more powerful.
• Experience value - a non-negative integer indicating how many experience points this
creature is worth when defeated by another creature
• is special - a Boolean variable that determines whether this creature is considered
“special.” Internally, special creatures are exactly the same as non-special creatures.
However, they have a slightly different appearance and are somehow very highly prized
by the players of your game.
Write a constructor that takes parameters for species, maximum hit points, attack rating,
defense rating, experience value, and “special” status. A newly created CuteCreature
should have a level of 1, current hit points equal to the maximum hit points, and zero
experience points.
(b) (3 points) str (self)
Returns a string summarizing all the instance attributes of the CuteCreature. For example,
the code
c = CuteCreature(‘Eckanz’, 40, 5, 3, 70, True)
print(c)
might result in output that looks something like this:
Level 1 Eckanz
--------------
*** Special! ***
HP: 40/40
ATK: 5
DEF: 3
XP: 0/200
XP Val: 70
1Feel free to include extra instance attribute(s) if needed or desired!
Page 2 of 10COMP 2150 - Summer 2023 Homework 2 Due Thurs., June 29, by 2359 Central
(c) (3 points) level up(self)
Makes the CuteCreature “level up.” The method should display some text when called,
to indicate that the creature is leveling up. Leveling up increases the creature’s level by 1,
in addition to the following changes:
• If the new level is between 2-9 (inclusive): Maximum hit points increase by 7, attack
and defense ratings increase by 3
• If the new level is 10 or over: Maximum hit points increase by 2, attack and defense
ratings increase by 1
• For all level ups: Experience value increases by 25
• For all level ups: The creature is fully healed (i.e., the current hit points is set to the
maximum hit points)
Note that level up is meant to be called only from this class’s gain xp method below.
(d) (3 points) gain xp(self, amount)
Makes the CuteCreature gain the specified amount of experience points, leveling up if
necessary. The method should display some text when called, to indicate that the creature
is gaining a certain amount of experience.
Call the previously written level up method to handle the process of leveling up. The
gain xp method should work for any positive value of amount, which means that multiple
level ups can occur from a single call if the argument is large enough.
CuteCreatures require 200 experience points to advance from level 1 to level 2, and the
experience required per level increases by 75 for each level thereafter. To illustrate how
this works, here’s a table of the experience needed for the first five levels:
Current Level - Experience Needed for Next Level - Cumulative Experience at Next Level
1               200                                 200
2               275                                 475
3               350                                 825
4               425                                 1250
5               500                                 1750
(e) (3 points) take damage(self, amount)
Makes the CuteCreature take the specified amount of damage to its current hit points.
Negative hit points are not allowed, so this method should also ensure that the current hit
points cannot go below zero.
The method should display some text when called, to indicate the amount of damage
taken. If the damage is enough to bring the current hit points to zero, display some text
to indicate that the CuteCreature has been incapacitated.

(f) (9 points) attack(self, target)
Makes the CuteCreature perform one attack against a target CuteCreature. The method
should display some text when called, to indicate which creature is attacking which and
the results of that attack.
If the target creature is defeated (i.e, has its current hit points brought down to zero)
by the attack, the method should also make the attacking creature gain the appropriate
amount of experience.
Call the previously written take damage and gain xp methods as needed.
The rules governing attack mechanics are as follows:
• The attacking creature has a 70% chance to score a regular hit with the attack, a 10%
chance to score a “critical hit,” and a 20% chance of missing altogether.
• On a regular hit, the damage to the target creature is the difference between the
attacking creature’s attack rating and the target creature’s defense rating. A minimum
of 1 damage is always dealt on a hit, even if this difference is zero or negative.
• On a critical hit (“crit”), the regular damage is doubled. Minimum damage from a
crit is 2.
• On a miss, no damage is dealt.

(g) (4 points) Below your CuteCreature class definition, test your class by creating two CuteCreature objects,
then having them attack each other until only one of them is left standing.
